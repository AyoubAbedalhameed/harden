#!/usr/bin/env bash

# Almost all of these information are from the mount(8) Linux man page (https://linux.die.net/man/8/mount)

# Different mount options with their diffenetion
export exec="Permit execution of binaries."
export noexec="Do not set execution of any binaries on this partition (prevents execution of binaries but allows scripts)."

export dev="Interpret character or block special devices on the filesystem."
export nodev="Do not allow character or special devices on this partition (prevents use of device files such as zero, sda etc)."

export suid="Allow set-user-identifier or set-group-identifier bits to take effect."
export nosuid="Do not allow set-user-identifier or set-group-identifier bits to take effect(prevent the setuid bit). (This seems safe, but is in fact rather unsafe if you have suidperl(1) installed.)"

export gid="Set the owner and group of the files in the filesystem (default: uid=gid=0). In case of /proc it's recommended to set it to gid=proc if the hidepid is set."

export ro="Mount the filesystem read-only."
export rw="Mount the filesystem read-write."

export sync="All I/O to the filesystem should be done synchronously. In case of media with limited number of write cycles (e.g. some flash drives) \"sync\" may cause life-cycle shortening."
export async="All I/O to the filesystem should be done asynchronously."
export atime="Do not use noatime feature, then the inode access time is controlled by kernel defaults. See also the description for strictatime and relatime mount options."
export noatime="Do not update inode access times on this filesystem (e.g, for faster access on the news spool to speed up news servers)."
export relatime="Update inode access times relative to modify or change time. Access time is only updated if the previous access time was earlier than the current modify or change time. (Similar to noatime, but doesn't break mutt or other applications that need to know if a file has been read since the last time it was modified.)"
export norelatime="Do not use relatime feature. See also the strictatime mount option."
export strictatime="Allows to explicitly requesting full atime updates. This makes it possible for kernel to defaults to relatime or noatime but still allow userspace to override it. For more details about the default system mount options see /proc/mounts."
export nostrictatime="Use the kernel's default behaviour for inode access time updates."
export diratime="Update directory inode access times on this filesystem. This is the default."
export nodiratime="Do not update directory inode access times on this filesystem."
export dirsync="All directory updates within the filesystem should be done synchronously. This affects the following system calls: creat, link, unlink, symlink, mkdir, rmdir, mknod and rename."
export iversion="Every time the inode is modified, the i_version field will be incremented."
export noiversion="Do not increment the i_version inode field."

export auto="Can be mounted with the -a option with the mount command."
export noauto="Can only be mounted explicitly (i.e., the -a option will not cause the filesystem to be mounted)."

export mand="Allow mandatory locks on this filesystem. (By fcntl() systemcall)"
export nomand="Do not allow mandatory locks on this filesystem."

export _netdev="The filesystem resides on a device that requires network access (used to prevent the system from attempting to mount these filesystems until the network has been enabled on the system)."
export nofail="Do not report errors for this device if it does not exist."

export nouser="Forbid an ordinary (i.e., non-root) user to mount the filesystem. This is the default."
export users="Allow every user to mount and unmount the filesystem. This option implies the options noexec, nosuid, and nodev (unless overridden by subsequent options, as in the option line users,exec,dev,suid)."
export group="Allow an ordinary (i.e., non-root) user to mount the filesystem if one of his groups matches the group of the device. This option implies the options nosuid and nodev (unless overridden by subsequent options, as in the option line group,dev,suid)."

export seclabel="Is an indicator added by the selinux code, that the filesystem is using xattrs for labels and that it supports label changes by setting the xattrs."

export hidepid="To permit users to only see their own processes and not those of other users, you must mount /proc with the hidepid=2 mount options."
export gid="This sets the owner or the group of newly created PTYs to the specified values. When nothing is specified, they will be set to the UID and GID of the creating process. For example, if there is a tty group with GID 5, then gid=5 will cause newly created PTYs to belong to the tty group."
export newinstance="Create a private instance of devpts filesystem, such that indices of ptys allocated in this new instance are independent of indices created in other instances of devpts. This option is mainly used to support containers in the linux kernel. It is implemented in linux kernel versions starting with 2.6.29. Further, this mount option is valid only if CONFIG_DEVPTS_MULTIPLE_INSTANCES is enabled in the kernel configuration."
export ptmxmode="Set the mode for the new ptmx device node in the devpts filesystem. With the support for multiple instances of devpts (see newinstance option above), each instance has a private ptmx node in the root of the devpts filesystem (typically /dev/pts/ptmx). For compatibility with older versions of the kernel, the default mode of the new ptmx node is 0000. ptmxmode=value specifies a more useful mode for the ptmx node and is highly recommended when the newinstance option is specified."


# Different File Systems with their diffenetion
export ext4="The ext4 filesystem is an an advanced level of the ext3 filesystem which incorporates scalability and reliability enhancements for supporting large filesystem."
export xfs="XFS is a high-performance 64-bit open source filesystem. XFS excels in the execution of parallel input/output (I/O) operations due to its design, which is based on allocation groups. Because of this, XFS enables extreme scalability of I/O threads, file system bandwidth, and size of files and of the file system itself when spanning multiple physical storage devices. XFS ensures the consistency of data by employing metadata journaling and supporting write barriers. Space allocation is performed via extents with data structures stored in B+ trees, improving the overall performance of the file system, especially when handling large files. Delayed allocation assists in the prevention of file system fragmentation; online defragmentation is also supported."
export vfat="A virtual file allocation table (VFAT) is an extension to the file allocation table (FAT) from Windows 95 and onward for creating, storing and managing files with long names. VFAT enables a hard disk drive to store files with names that are more than eight characters long. Usually found on 'EFI' Partitions like (/boot/efi)."
export sysfs="sysfs is a pseudo file system provided by the Linux kernel that exports information about various kernel subsystems, hardware devices, and associated device drivers from the kernel's device model to user space through virtual files.[1] In addition to providing information about various devices and kernel subsystems, exported virtual files are also used for their configuration."
export tmpfs="tmpfs is a temporary file storage paradigm. It is intended to appear as a mounted file system, but data is stored in volatile memory instead of a persistent storage device. A similar construction is a RAM disk, which appears as a virtual disk drive and hosts a disk file system."
export proc="The proc filesystem (procfs) is a special file-system that presents information about processes and other system information in a hierarchical file-like structure. In Linux, it can also be used to obtain information about the kernel and to change certain kernel parameters at runtime."
export devtmpfs="devtmpfs is a file system with automated device nodes populated by the kernel. This means you don't have to have udev running nor to create a static /dev layout with additional, unneeded and not present device nodes. Instead the kernel populates the appropriate information based on the known devices."
export devpts="devpts is a virtual filesystem directory available in the Linux kernel since version 2.1.93. It is normally mounted at /dev/pts and contains solely devices files which represent slaves to the multiplexing master located at /dev/ptmx which is in turn is used to implement terminal emulators (such as X11 xterm)"
export securityfs="Securityfs is a pseudo-filesystem, This filesystem is meant to be used by security modules, some of which were otherwise creating their own filesystems; it should be mounted on /sys/kernel/security. You can only have files and directories _in memory_ to configure those security modules. Securityfs is built on top of the VFS."
export configfs="Configfs is a RAM-based virtual file system. It is for creating, managing and destroying kernel objects from user-space."
export selinuxfs="selinuxfs is a read/write interface used by SELinux library functions for userspace SELinux-aware applications and object managers. Note: while it is possible for userspace applications to read/write to this interface, it is not recommended - use the libselinux library."
export mqueue="The \"mqueue\" filesystem provides the necessary kernel features to enable the creation of a user space library that implements the POSIX message queues API."
export cgroup="Control groups, usually referred to as cgroups, are a Linux kernel feature which allow processes to be organized into hierarchical groups whose usage of various types of resources can then be limited and monitored. The kernel's cgroup interface is provided through a pseudo-filesystem called cgroupfs."
export hugetlbfs="Hugetlbfs is a bare interface to the huge page capabilities of the underlying hardware; taking advantage of it requires application awareness or library support. Libhugetlbfs makes heavy use of this interface when automatically backing regions with huge pages."
export autofs="Used for systemd-binfmt.service which is an early boot service that registers additional binary formats for executables in the kernel. binfmt_misc (Miscellaneous Binary Format) is a capability of the Linux kernel which allows arbitrary executable file formats to be recognized and passed to certain user space applications, such as emulators and virtual machines. It is one of a number of binary format handlers in the kernel that are involved in preparing a user-space program to run."
export bpf="Usually mounted under /sys/fs/bpf. This one is meant to be mounted at /sys/fs/bpf. It is a singleton filesystem, meaning that it can be mounted multiple times within a single namespace and every mount will see the same directory tree. Each mount namespace will, however, get its own version of this filesystem. Within /sys/fs/bpf, a suitably privileged user can create and remove directories in the usual ways to set up a suitable directory hierarchy. The Berkeley Packet Filter (BPF) is a technology used for programs that need to, among other things, analyze network traffic."
export sunrpc="Remote Procedure Call (SunRPC) protocol provides access to run procedures on remote machine. RPC is used heavily in UNIX to implement many protocols, for example NFS and NIS."
export fusectl="FUSE is a userspace filesystem framework. It consists of a kernel module (fuse.ko), a userspace library (libfuse.*) and a mount utility (fusermount). One of the most important features of FUSE is allowing secure, non-privileged mounts. This opens up new possibilities for the use of filesystems. A good example is sshfs: a secure network filesystem using the sftp protocol."


declare -A MOUNT_POINTS

MOUNT_POINTS[/]="(ext4)|(xfs) options= rw relatime nosuid seclabel"

MOUNT_POINTS[/var]="(ext4)|(xfs) options= rw relatime nodev nosuid seclabel"

MOUNT_POINTS[/proc]="proc options= rw nosuid nodev noexec hidepid=2 gid=proc"
MOUNT_POINTS[/proc/sys/fs/binfmt_misc]="autofs options= rw relatime nosuid direct"

MOUNT_POINTS[/usr]="(ext4)|(xfs) options= rw relatime nodev nosuid seclabel"

MOUNT_POINTS[/tmp]="(tmpfs)|(ext4)|(xfs) options= rw nosuid nodev seclabel"

MOUNT_POINTS[/sys]="sysfs options= rw nosuid nodev noexec relatime seclabel"
MOUNT_POINTS[/sys/fs/selinux]="selinuxfs options= rw nosuid noexec relatime"
MOUNT_POINTS[/sys/fs/bpf]="bpf options= rw nosuid nodev noexec relatime mode=700"
MOUNT_POINTS[/sys/fs/cgroup]="cgroup options= ro nosuid nodev noexec seclabel mode=755"
MOUNT_POINTS[/sys/fs/pstore]="pstore options= rw nosuid nodev noexec relatime seclabel"
MOUNT_POINTS[/sys/fs/fuse/connections]="fusectl options= rw nosuid nodev noexec relatime"
MOUNT_POINTS[/sys/kernel/security]="securityfs options= rw nosuid nodev noexec relatime"
MOUNT_POINTS[/sys/kernel/debug]="debugfs options= rw nosuid nodev noexec relatime seclabel"
MOUNT_POINTS[/sys/kernel/tracing]="tracefs options= rw nosuid nodev noexec relatime seclabel"
MOUNT_POINTS[/sys/kernel/debug/tracing]="tracefs options= rw nosuid nodev noexec relatime seclabel"
MOUNT_POINTS[/sys/kernel/config]="configfs options= rw nosuid nodev noexec relatime"
MOUNT_POINTS[/sys/firmware/efi/efivars]="efivars options= rw nosuid nodev noexec relatime"

MOUNT_POINTS[/dev]="devtmpfs options= rw nosuid seclabel mode=755"
MOUNT_POINTS[/dev/shm]="tmpfs options= rw nosuid nodev seclabel"
MOUNT_POINTS[/dev/mqueue]="mqueue options= rw nosuid nodev noexec relatime seclabel"
MOUNT_POINTS[/dev/pts]="devpts options= rw nosuid noexec relatime seclabel gid=5 mode=620 ptmxmode=000"
MOUNT_POINTS[/dev/hugepages]="hugetlbfs options= rw relatime nosuid seclabel"

MOUNT_POINTS[/run]="tmpfs options= rw nosuid nodev seclabel"

MOUNT_POINTS[/home]="(ext4)|(xfs) options= rw nodev nosuid selabel"

MOUNT_POINTS[/boot]="(ext4)|(xfs) options= rw relatime nodev seclabel"
MOUNT_POINTS[/boot/efi]="vfat options= rw relatime fmask=0077 dmask=0077 errors=remount-ro"
