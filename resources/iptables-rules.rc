#!/usr/bin/env bash 

#This file is used by scripts/firewall-harden.sh script, as a resource for firewall hardening.
#You can edit this file to add/remove rules in the same format in order to regullary check them via the hardening service.


declare -A FW_Rules 



## 1. Defining filter table chain's policies (Restrictive):
#FW_Rules[rules.policy,0]=3                    #Num of rules. 
#FW_Rules[rules.policy,1]="-P INPUT DROP"      
#FW_Rules[rules.policy,2]="-P OUTPUT DROP"
#FW_Rules[rules.policy,3]="-P FORWARD DROP"
#FW_Rules[rules.policy,d]=""



## 2. Blocking Specific Address Rules, Multiple Addresses (comma seperated) can be used here:
FW_Rules[rules.addressblock,0]=1
FW_Rules[rules.addressblock,1]="-A INPUT -s @0 -j DROP"
FW_Rules[rules.addressblock,d]=""




# 3. Allow ALL incomming SSH from specific/All networks on all interfaces
FW_Rules[rules.ssh_in,0]=2
FW_Rules[rules.ssh_in,1]="-A INPUT -p tcp -s @1 --dport @0 -m state --state NEW,ESTABLISHED -j ACCEPT"
FW_Rules[rules.ssh_in,2]="-A OUTPUT -p tcp --sport @0 -m state --state ESTABLISHED -j ACCEPT"
FW_Rules[rules.ssh_in,d]=""





# 4. Allow incoming HTTP requests from specific/All networks on all interfaces: 
FW_Rules[rules.http,0]=2
FW_Rules[rules.http,1]="-A INPUT -p tcp -s @1 --dport @0 -m state --state NEW,ESTABLISHED -j ACCEPT"
FW_Rules[rules.http,2]="-A OUTPU -p tcp --sport @0 -m state --state ESTABLISHED -j ACCEPT"
FW_Rules[rules.http,d]=""




# 5. Allow incoming HTTPS requests from specific/All networks on all interfaces:
FW_Rules[rules.https_in,0]=2
FW_Rules[rules.https_in,1]="-A INPUT  -p tcp --dport @0 -m state --state NEW,ESTABLISHED -j ACCEPT"
FW_Rules[rules.https_in,2]="-A OUTPUT -p tcp --sport @0 -m state --state ESTABLISHED -j ACCEPT"
FW_Rules[rules.https_in,d]=""



## 6. MultiPorts (Allow incoming connections on user-choosen ports):
FW_Rules[rules.allow_ports,0]=2
FW_Rules[rules.allow_ports,1]="-A INPUT  -p tcp -m multiport --dports @0 -m state --state NEW,ESTABLISHED -j ACCEPT"
FW_Rules[rules.allow_ports,2]="-A OUTPUT -p tcp -m multiport --sports @0 -m state --state ESTABLISHED -j ACCEPT"
FW_Rules[rules.allow_ports,d]=""





## 7. Allow out SSH for specific ip(s), networks: 
FW_Rules[rules.ssh_out,0]=2
FW_Rules[rules.ssh_out,1]="-A OUTPUT -p tcp -d @0 --dport 22 -m state --state NEW,ESTABLISHED -j ACCEPT"
FW_Rules[rules.ssh_out,2]="-A INPUT  -p tcp -s @0 --sport 22 -m state --state ESTABLISHED -j ACCEPT"
FW_Rules[rules.ssh_out,d]=""





## 8. Allow outgoing HTTPS to a specific/all/ip/network:
FW_Rules[rules.https_out,0]=2
FW_Rules[rules.https_out,1]="-A OUTPUT -p tcp -d @0 --dport 443 -m state --state @0 NEW,ESTABLISHED -j ACCEPT"
FW_Rules[rules.https_out,2]="-A INPUT -p tcp --sport 443 -m state --state @0 @1 ESTABLISHE" 
FW_Rules[rules.https_out,d]=""





## 9. Controling outgoing Pings (ICMP ECHO Messages): 
FW_Rules[rules.icmp_ping_out,0]=2
FW_Rules[rules.icmp_ping_out,1]="-A OUTPUT -p icmp --icmp-type echo-request -j ACCEPT"
FW_Rules[rules.icmp_ping_out,2]="-A INPUT -p icmp --icmp-type echo-reply -j ACCEPT"
FW_Rules[rules.icmp_ping_out,d]=""



## 10. Controling incoming Pings (ICMP ECHO Messages):
FW_Rules[rules.icmp_ping_in,0]=2
FW_Rules[rules.icmp_ping_in,1]="-A INPUT -p icmp --icmp-type echo-request -j ACCEPT" 
FW_Rules[rules.icmp_ping_in,2]="-A OUTPUT -p icmp --icmp-type echo-reply -j ACCEPT"
FW_Rules[rules.icmp_ping_in,d]=""


# 11. Allow loopback access:
FW_Rules[rules.loopback_access,0]=2
FW_Rules[rules.loopback_access,1]="-A INPUT -i lo -j ACCEPT"
FW_Rules[rules.loopback_access,2]="-A OUTPUT -o lo -j ACCEPT"
FW_Rules[rules.loopback_access,d]=""





